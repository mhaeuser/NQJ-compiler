@BOOK{javaspec,
	author = {James Gosling and Bill Joy and Guy Steele and Gilad Bracha and Alex Buckley and Daniel Smith and Gavin Bierman},
	title = {The Java Language Specification},
	publisher={Oracle America, Inc.},
	year = {2020},
   edition = {{Java SE} 15}
}

@MISC{clangddocs,
  title = {clangd Features},
  author = {The {LLVM} Project},
  howpublished = {Available at \url{https://clangd.llvm.org/features.html}},
  note = {Accessed: 2020-02-21}
}

@article{cbugs,
  author = {Yang, Xuejun and Chen, Yang and Eide, Eric and Regehr, John},
  title = {{Finding and Understanding Bugs in C Compilers}},
  year = {2011},
  issue_date = {June 2011},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {46},
  number = {6},
  issn = {0362-1340},
  url = {https://doi.org/10.1145/1993316.1993532},
  doi = {10.1145/1993316.1993532},
  abstract = {Compilers should be correct. To improve the quality of C compilers, we created Csmith, a randomized test-case generation tool, and spent three years using it to find compiler bugs. During this period we reported more than 325 previously unknown bugs to compiler developers. Every compiler we tested was found to crash and also to silently generate wrong code when presented with valid input. In this paper we present our compiler-testing tool and the results of our bug-hunting study. Our first contribution is to advance the state of the art in compiler testing. Unlike previous tools, Csmith generates programs that cover a large subset of C while avoiding the undefined and unspecified behaviors that would destroy its ability to automatically find wrong-code bugs. Our second contribution is a collection of qualitative and quantitative results about the bugs we have found in open-source C compilers.},
  journal = {SIGPLAN Not.},
  month = jun,
  pages = {283–294},
  numpages = {12},
  keywords = {random testing, random program generation, automated testing, compiler defect, compiler testing}
}

@article{llvmundef,
  author = {Lee, Juneyoung and Kim, Yoonseung and Song, Youngju and Hur, Chung-Kil and Das, Sanjoy and Majnemer, David and Regehr, John and Lopes, Nuno P.},
  title = {{Taming Undefined Behavior in LLVM}},
  year = {2017},
  issue_date = {June 2017},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {52},
  number = {6},
  issn = {0362-1340},
  url = {https://doi.org/10.1145/3140587.3062343},
  doi = {10.1145/3140587.3062343},
  abstract = { A central concern for an optimizing compiler is the design of its intermediate representation (IR) for code. The IR should make it easy to perform transformations, and should also afford efficient and precise static analysis. In this paper we study an aspect of IR design that has received little attention: the role of undefined behavior. The IR for every optimizing compiler we have looked at, including GCC, LLVM, Intel's, and Microsoft's, supports one or more forms of undefined behavior (UB), not only to reflect the semantics of UB-heavy programming languages such as C and C++, but also to model inherently unsafe low-level operations such as memory stores and to avoid over-constraining IR semantics to the point that desirable transformations become illegal. The current semantics of LLVM's IR fails to justify some cases of loop unswitching, global value numbering, and other important "textbook" optimizations, causing long-standing bugs. We present solutions to the problems we have identified in LLVM's IR and show that most optimizations currently in LLVM remain sound, and that some desirable new transformations become permissible. Our solutions do not degrade compile time or performance of generated code. },
  journal = {SIGPLAN Not.},
  month = jun,
  pages = {633–647},
  numpages = {15},
  keywords = {compilers, intermediate representations, undefined behavior}
}

@article{compcert,
  author = {Leroy, Xavier},
  title = {{Formal Verification of a Realistic Compiler}},
  year = {2009},
  issue_date = {July 2009},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {52},
  number = {7},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/1538788.1538814},
  doi = {10.1145/1538788.1538814},
  abstract = {This paper reports on the development and formal verification (proof of semantic preservation) of CompCert, a compiler from Clight (a large subset of the C programming language) to PowerPC assembly code, using the Coq proof assistant both for programming the compiler and for proving its correctness. Such a verified compiler is useful in the context of critical software and its formal verification: the verification of the compiler guarantees that the safety properties proved on the source code hold for the executable compiled code as well.},
  journal = {Commun. ACM},
  month = jul,
  pages = {107–115},
  numpages = {9}
}

@MISC{msvcfixes,
  author = {{Microsoft Visual C++ Team}},
  title = {{Visual C++ 2015 Update 2 Bug Fixes}},
  year = {2016},
  howpublished = {Available at \url{https://devblogs.microsoft.com/cppblog/visual-c-2015-update-2-bug-fixes/}},
  note = {Online. Accessed 20th February 2021}
}

@MISC{llvmspectre,
  author = {Chandler Carruth},
  title = {{Speculative Load Hardening}},
  howpublished = {Available at \url{https://llvm.org/docs/SpeculativeLoadHardening.html}},
  note = {Online. Accessed 20th February 2021}
}

@MISC{msvcspectre,
  author = {Daniel Donenfeld},
  title = {{More Spectre Mitigations in MSVC}},
  year = {2020},
  howpublished = {Available at \url{https://devblogs.microsoft.com/cppblog/more-spectre-mitigations-in-msvc/}},
  note = {Online. Accessed 20th February 2021}
}

@inproceedings {251530,
  author = {Oleksii Oleksenko and Bohdan Trach and Mark Silberstein and Christof Fetzer},
  title = {SpecFuzz: Bringing Spectre-type vulnerabilities to the surface},
  booktitle = {29th {USENIX} Security Symposium ({USENIX} Security 20)},
  year = {2020},
  isbn = {978-1-939133-17-5},
  pages = {1481--1498},
  url = {https://www.usenix.org/conference/usenixsecurity20/presentation/oleksenko},
  publisher = {{USENIX} Association},
  month = aug,
}

@INPROCEEDINGS{8835233,
  author={P. {Kocher} and J. {Horn} and A. {Fogh} and D. {Genkin} and D. {Gruss} and W. {Haas} and M. {Hamburg} and M. {Lipp} and S. {Mangard} and T. {Prescher} and M. {Schwarz} and Y. {Yarom}},
  booktitle={2019 IEEE Symposium on Security and Privacy (SP)}, 
  title={Spectre Attacks: Exploiting Speculative Execution}, 
  year={2019},
  volume={},
  number={},
  pages={1-19},
  doi={10.1109/SP.2019.00002}
}

@MISC{swiftops,
  author = {Apple Inc.},
  title = {{The Swift Programming Language: Basic Operators}},
  howpublished = {Available at \url{https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html}},
  note = {Online. Accessed 20th February 2021}
}

@MISC{rustops,
  author = {The Rust Project Developers},
  title = {{The Rust Reference: Operator expressions}},
  howpublished = {Available at \url{https://doc.rust-lang.org/reference/expressions/operator-expr.html}},
  note = {Online. Accessed 20th February 2021}
}

@book{10.5555/2543987,
  author = {Stroustrup, Bjarne},
  title = {The C++ Programming Language},
  year = {2013},
  isbn = {0321563840},
  publisher = {Addison-Wesley Professional},
  edition = {4th}
}

@MISC{aotjitpaper,
  author = {Rahul Kandu},
  title = {{Android: The Road to JIT/AOT Hybrid Compilation-Based Application User Experience}},
  year = {2016},
  howpublished = {Available at \url{https://software.intel.com/content/www/us/en/develop/articles/android-the-road-to-jitaot-hybrid-compilation-based-application-user-experience.html}},
  note = {Online. Accessed 20th February 2021}
}

@MISC{llvmpage,
  title = {The LLVM Compiler Infrastructure},
  author = {The {LLVM} Project},
  howpublished = {Available at \url{https://llvm.org/}},
  note = {Online. Accessed 22nd February 2021}
}

@MISC{clp4solution,
  title = {{NQJ Compiler (exercise sheet 4)}},
  author = {Albert Schimpf},
  howpublished = {Available at \url{https://pl-git.informatik.uni-kl.de/clp20-groups/clp_solutions/-/tree/master/ex4}},
  note = {Online. Accessed 22nd February 2021}
}
